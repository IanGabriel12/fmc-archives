{
  "name": "Natural number game",
  "version": "1.3.3",
  "data": [
    {
      "lean": "lemma example1 (x y z : mynat) : x * y + z = x * y + z :=\n",
      "isSolved": true,
      "editorText": "refl,"
    },
    {
      "lean": "lemma example2 (x y : mynat) (h : y = x + 7) : 2 * y = 2 * (x + 7) :=\n",
      "isSolved": true,
      "editorText": "rw h,\r\nrefl,"
    },
    {
      "lean": "lemma example3 (a b : mynat) (h : succ a = b) : succ(succ(a)) = succ(b) :=\n",
      "isSolved": true,
      "editorText": "rw h,\r\nrefl,"
    },
    {
      "lean": "lemma add_succ_zero (a : mynat) : a + succ(0) = succ(a) :=\n",
      "isSolved": true,
      "editorText": "rw add_succ,\r\nrw add_zero,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma zero_add (n : mynat) : 0 + n = n :=\n",
      "isSolved": true,
      "editorText": "induction n with d hd,\r\nrw add_zero,\r\nrefl,\r\nrw add_succ,\r\nrw hd,\r\nrefl,"
    },
    {
      "lean": "lemma add_assoc (a b c : mynat) : (a + b) + c = a + (b + c) :=\n",
      "isSolved": true,
      "editorText": "induction c with k hk,\r\n-- base case\r\nrw add_zero (a+b),\r\nrw add_zero b,\r\nrefl,\r\n\r\n--inductive step\r\nrw add_succ (a+b) k,\r\nrw add_succ b k,\r\nrw add_succ a (b+k),\r\nrw hk,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma succ_add (a b : mynat) : succ a + b = succ (a + b) :=\n",
      "isSolved": true,
      "editorText": "induction b with k hk,\r\n--base case\r\nrw add_zero (succ a),\r\nrw add_zero a,\r\nrefl,\r\n\r\n--inductive step\r\nrw add_succ (succ a) k,\r\nrw add_succ a k,\r\nrw hk,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma add_comm (a b : mynat) : a + b = b + a :=\n",
      "isSolved": true,
      "editorText": "induction b with k hk,\r\n-- base case\r\nrw add_zero,\r\nrw zero_add,\r\nrefl,\r\n\r\n--inductive step\r\nrw add_succ a k,\r\nrw succ_add k a,\r\nrw hk,\r\nrefl,\r\n"
    },
    {
      "lean": "theorem succ_eq_add_one (n : mynat) : succ n = n + 1 :=\n",
      "isSolved": true,
      "editorText": "rw one_eq_succ_zero,\r\nrw add_succ n 0,\r\nrw add_zero n,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma add_right_comm (a b c : mynat) : a + b + c = a + c + b :=\n",
      "isSolved": true,
      "editorText": "rw add_assoc a b c,\r\nrw add_comm b c,\r\nrw ← add_assoc a c b,\r\nrefl,\r\n\r\n"
    },
    {
      "lean": "lemma zero_mul (m : mynat) : 0 * m = 0 :=\n",
      "isSolved": true,
      "editorText": "induction m with k hk,\r\n--base case\r\nrw mul_zero 0,\r\nrefl,\r\n\r\n--inductive step\r\nrw mul_succ 0 k,\r\nrw hk,\r\nrw add_zero,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma mul_one (m : mynat) : m * 1 = m :=\n",
      "isSolved": true,
      "editorText": "rw one_eq_succ_zero,\r\nrw mul_succ m 0,\r\nrw mul_zero m,\r\nrw zero_add m,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma one_mul (m : mynat) : 1 * m = m :=\n",
      "isSolved": true,
      "editorText": "induction m with k hk,\r\n--base case\r\nrw mul_zero 1,\r\nrefl,\r\n\r\n--inductive step\r\nrw mul_succ 1 k,\r\nrw hk,\r\nrw succ_eq_add_one k,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma mul_add (t a b : mynat) : t * (a + b) = t * a + t * b :=\n",
      "isSolved": true,
      "editorText": "induction b with k hk,\r\n--base case\r\nrw add_zero a,\r\nrw mul_zero t,\r\nrw add_zero (t*a),\r\nrefl,\r\n\r\n--inductive pass\r\nrw add_succ a k,\r\nrw mul_succ t (a+k),\r\nrw hk,\r\nrw mul_succ t k,\r\nrw add_assoc (t*a) (t*k) t,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma mul_assoc (a b c : mynat) : (a * b) * c = a * (b * c) :=\n",
      "isSolved": true,
      "editorText": "induction c with k hk,\r\n--base case\r\nrw mul_zero (a*b),\r\nrw mul_zero b,\r\nrw mul_zero a,\r\nrefl,\r\n\r\n--inductive step\r\nrw mul_succ,\r\nrw hk,\r\nrw ← mul_add a (b*k) b,\r\nrw succ_eq_add_one k,\r\nrw mul_add b k 1,\r\nrw mul_one b,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma succ_mul (a b : mynat) : succ a * b = a * b + b :=\n",
      "isSolved": true,
      "editorText": "induction b with k hk,\r\n--base case\r\nrw mul_zero (succ a),\r\nrw add_zero (a*0),\r\nrw mul_zero a,\r\nrefl,\r\n\r\n--inductive step\r\nrw mul_succ (succ a) k,\r\nrw add_succ ((succ a) * k) a,\r\nrw hk,\r\n\r\nrw add_succ (a * (succ k)) k,\r\nrw succ_eq_add_one k,\r\nrw mul_add a k 1,\r\nrw mul_one a,\r\nrw add_right_comm (a*k) a k,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma add_mul (a b t : mynat) : (a + b) * t = a * t + b * t :=\n",
      "isSolved": true,
      "editorText": "induction t with k hk,\r\n--base case\r\nrw mul_zero (a+b),\r\nrw mul_zero a,\r\nrw mul_zero b,\r\nrw add_zero 0,\r\nrefl,\r\n\r\n--inductive step\r\nrw mul_succ (a+b) k,\r\nrw hk,\r\n\r\nrw succ_eq_add_one k,\r\nrw mul_add a k 1,\r\nrw mul_one a,\r\nrw mul_add b k 1,\r\nrw mul_one b,\r\nrw add_right_comm (a*k) a (b*k + b),\r\nrw ← add_assoc (a*k) (b*k) b,\r\nrw add_assoc (a*k + b*k) b a,\r\nrw add_comm b a,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma mul_comm (a b : mynat) : a * b = b * a :=\n",
      "isSolved": true,
      "editorText": "induction b with k hk,\r\n--base case\r\nrw mul_zero a,\r\nrw zero_mul a,\r\nrefl,\r\n\r\n--inductive step\r\nrw mul_succ a k,\r\nrw succ_mul k a,\r\nrw hk,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma mul_left_comm (a b c : mynat) : a * (b * c) = b * (a * c) :=\n",
      "isSolved": true,
      "editorText": "rw ← mul_assoc a b c,\r\nrw mul_comm a b,\r\nrw mul_assoc b a c,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma zero_pow_zero : (0 : mynat) ^ (0 : mynat) = 1 :=\n",
      "isSolved": true,
      "editorText": "rw pow_zero 0,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma zero_pow_succ (m : mynat) : (0 : mynat) ^ (succ m) = 0 :=\n",
      "isSolved": true,
      "editorText": "rw pow_succ 0 m,\r\nrw mul_zero (0^m),\r\nrefl,\r\n"
    },
    {
      "lean": "lemma pow_one (a : mynat) : a ^ (1 : mynat) = a :=\n",
      "isSolved": true,
      "editorText": "rw one_eq_succ_zero,\r\nrw pow_succ a,\r\nrw pow_zero a,\r\nrw one_mul a,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma one_pow (m : mynat) : (1 : mynat) ^ m = 1 :=\n",
      "isSolved": true,
      "editorText": "induction m with k hk,\r\n-- base case\r\nrw pow_zero 1,\r\nrefl,\r\n\r\n--inductive step\r\nrw pow_succ 1,\r\nrw hk,\r\nrw mul_one 1,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma pow_add (a m n : mynat) : a ^ (m + n) = a ^ m * a ^ n :=\n",
      "isSolved": true,
      "editorText": "induction n with k hk,\r\n--base case\r\nrw add_zero m,\r\nrw pow_zero a,\r\nrw mul_one (a^m),\r\nrefl,\r\n\r\n--inductive step\r\nrw add_succ m k,\r\nrw pow_succ a (m+k),\r\nrw hk,\r\nrw pow_succ a k,\r\nrw mul_assoc (a^m) (a^k) a,\r\nrefl,\r\n\r\n"
    },
    {
      "lean": "lemma mul_pow (a b n : mynat) : (a * b) ^ n = a ^ n * b ^ n :=\n",
      "isSolved": true,
      "editorText": "induction n with k hk,\r\n--base case\r\nrw pow_zero (a*b),\r\nrw pow_zero a,\r\nrw pow_zero b,\r\nrw one_mul 1,\r\nrefl,\r\n\r\n--inductive step\r\nrw pow_succ (a*b) k,\r\nrw hk,\r\n\r\nrw pow_succ a k,\r\nrw pow_succ b k,\r\nrw mul_assoc (a^k) a ((b^k) * b),\r\nrw mul_left_comm a (b^k) b,\r\nrw ← mul_assoc (a^k) (b^k) (a*b),\r\nrefl,\r\n"
    },
    {
      "lean": "lemma pow_pow (a m n : mynat) : (a ^ m) ^ n = a ^ (m * n) :=\n",
      "isSolved": true,
      "editorText": "induction n with k hk,\r\n--base case\r\nrw pow_zero (a^m),\r\nrw mul_zero m,\r\nrw pow_zero a,\r\nrefl,\r\n\r\n--inductive step\r\nrw pow_succ (a^m) k,\r\nrw hk,\r\nrw ← pow_add a (m*k) m,\r\nrw ← mul_succ m k,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma add_squared (a b : mynat) :\n  (a + b) ^ (2 : mynat) = a ^ (2 : mynat) + b ^ (2 : mynat) + 2 * a * b :=\n",
      "isSolved": true,
      "editorText": "rw two_eq_succ_one,\r\nrw succ_eq_add_one 1,\r\nrw pow_add (a+b) 1 1,\r\nrw pow_one (a+b),\r\nrw mul_add (a+b) a b,\r\nrw add_mul a b a,\r\nrw add_mul a b b,\r\nrw mul_comm b a,\r\n\r\nrw pow_add a 1 1,\r\nrw pow_one a,\r\nrw pow_add b 1 1,\r\nrw pow_one b,\r\nrw mul_assoc (1 + 1) a b,\r\nrw ← succ_eq_add_one 1,\r\nrw succ_mul 1 (a*b),\r\nrw one_mul (a*b),\r\nrw add_assoc (a*a) (b*b) (a*b + a*b),\r\nrw add_comm (b*b) (a*b + a*b),\r\nrw add_assoc (a*b) (a*b) (b*b),\r\nrw ← add_assoc (a*a) (a*b) (a*b + b*b),\r\n\r\nrefl,\r\n"
    },
    {
      "lean": "example (P Q : Type) (p : P) (h : P → Q) : Q :=\n",
      "isSolved": true,
      "editorText": "exact h p,\r\n"
    },
    {
      "lean": "example : mynat → mynat :=\n",
      "isSolved": true,
      "editorText": "intro n,\r\nexact 3*n+2,\r\n"
    },
    {
      "lean": "example (P Q R S T U: Type)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "have q : Q := h p,\r\nhave t : T := j q,\r\nhave u : U := l t,\r\nexact u,\r\n"
    },
    {
      "lean": "example (P Q R S T U: Type)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "have q : Q := h p,\r\nhave t : T := j q,\r\nhave u : U := l t,\r\nexact u,\r\n"
    },
    {
      "lean": "example (P Q : Type) : P → (Q → P) :=\n",
      "isSolved": true,
      "editorText": "intros p q,\r\nexact p,\r\n"
    },
    {
      "lean": "example (P Q R : Type) : (P → (Q → R)) → ((P → Q) → (P → R)) :=\n",
      "isSolved": true,
      "editorText": "intros f h p,\r\nhave q : Q := h p,\r\nhave r : R := f p q,\r\nexact r,\r\n"
    },
    {
      "lean": "example (P Q F : Type) : (P → Q) → ((Q → F) → (P → F)) :=\n",
      "isSolved": true,
      "editorText": "intros f h p,\r\napply h,\r\napply f,\r\nexact p,\r\n"
    },
    {
      "lean": "example (P Q : Type) : (P → Q) → ((Q → empty) → (P → empty)) :=\n",
      "isSolved": true,
      "editorText": "intros f g p,\r\napply g,\r\napply f,\r\nexact p,\r\n"
    },
    {
      "lean": "example (A B C D E F G H I J K L : Type)\n(f1 : A → B) (f2 : B → E) (f3 : E → D) (f4 : D → A) (f5 : E → F)\n(f6 : F → C) (f7 : B → C) (f8 : F → G) (f9 : G → J) (f10 : I → J)\n(f11 : J → I) (f12 : I → H) (f13 : E → H) (f14 : H → K) (f15 : I → L)\n : A → L :=\n",
      "isSolved": true,
      "editorText": "intro a,\r\napply f15,\r\napply f11,\r\napply f9,\r\napply f8,\r\napply f5,\r\napply f2,\r\napply f1,\r\nexact a,\r\n"
    },
    {
      "lean": "example (P Q : Prop) (p : P) (h : P → Q) : Q :=\n",
      "isSolved": true,
      "editorText": "exact h p,"
    },
    {
      "lean": "lemma imp_self (P : Prop) : P → P :=\n",
      "isSolved": true,
      "editorText": "intro p,\r\nexact p,"
    },
    {
      "lean": "lemma maze (P Q R S T U: Prop)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "have q : Q := h p,\r\nhave t : T := j q,\r\nhave u : U := l t,\r\nexact u,"
    },
    {
      "lean": "lemma maze (P Q R S T U: Prop)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "have q : Q := h p,\r\nhave t : T := j q,\r\nhave u : U := l t,\r\nexact u,"
    },
    {
      "lean": "example (P Q : Prop) : P → (Q → P) :=\n",
      "isSolved": true,
      "editorText": "intros p q,\r\nexact p,"
    },
    {
      "lean": "example (P Q R : Prop) : (P → (Q → R)) → ((P → Q) → (P → R)) :=\n",
      "isSolved": true,
      "editorText": "intros imp1 imp2 p,\r\nhave q : Q := imp2 p,\r\nhave imp3 := imp1 p,\r\nhave r : R := imp3 q,\r\nexact r,\r\n"
    },
    {
      "lean": "lemma imp_trans (P Q R : Prop) : (P → Q) → ((Q → R) → (P → R)) :=\n",
      "isSolved": true,
      "editorText": "intro hpq,\r\nintro hqr,\r\nintro p,\r\nhave q : Q := hpq p,\r\nexact hqr q,\r\n"
    },
    {
      "lean": "lemma contrapositive (P Q : Prop) : (P → Q) → (¬ Q → ¬ P) :=\n",
      "isSolved": true,
      "editorText": "intro hpq,\r\nrepeat {rw not_iff_imp_false},\r\nintro nq,\r\nintro p,\r\nhave q : Q := hpq p,\r\nhave boom := nq q,\r\nexact boom,\r\n"
    },
    {
      "lean": "example (A B C D E F G H I J K L : Prop)\n(f1 : A → B) (f2 : B → E) (f3 : E → D) (f4 : D → A) (f5 : E → F)\n(f6 : F → C) (f7 : B → C) (f8 : F → G) (f9 : G → J) (f10 : I → J)\n(f11 : J → I) (f12 : I → H) (f13 : E → H) (f14 : H → K) (f15 : I → L)\n : A → L :=\n",
      "isSolved": true,
      "editorText": "--cc\r\nintro a,\r\napply f15,\r\napply f11,\r\napply f9,\r\napply f8,\r\napply f5,\r\napply f2,\r\napply f1,\r\nexact a,\r\n"
    },
    {
      "lean": "example (P Q : Prop) (p : P) (q : Q) : P ∧ Q :=\n",
      "isSolved": true,
      "editorText": "split,\r\nexact p,\r\nexact q,\r\n"
    },
    {
      "lean": "lemma and_symm (P Q : Prop) : P ∧ Q → Q ∧ P :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\ncases h with p q,\r\nsplit,\r\nexact q,\r\nexact p,\r\n"
    },
    {
      "lean": "lemma and_trans (P Q R : Prop) : P ∧ Q → Q ∧ R → P ∧ R :=\n",
      "isSolved": true,
      "editorText": "intros hpq hqr,\r\ncases hpq with p q,\r\ncases hqr with q' r,\r\nsplit,\r\nexact p,\r\nexact r,\r\n"
    },
    {
      "lean": "lemma iff_trans (P Q R : Prop) : (P ↔ Q) → (Q ↔ R) → (P ↔ R) :=\n",
      "isSolved": true,
      "editorText": "intro iff_pq,\r\nintro iff_qr,\r\ncases iff_pq with hpq hqp,\r\ncases iff_qr with hqr hrq,\r\nsplit,\r\n--first part\r\nintro p,\r\napply hqr,\r\napply hpq,\r\nexact p,\r\n--second part\r\nintro r,\r\napply hqp,\r\napply hrq,\r\nexact r,\r\n"
    },
    {
      "lean": "lemma iff_trans (P Q R : Prop) : (P ↔ Q) → (Q ↔ R) → (P ↔ R) :=\n",
      "isSolved": true,
      "editorText": "intro iff_pq,\r\nintro iff_qr,\r\ncases iff_pq with hpq hqp,\r\ncases iff_qr with hqr hrq,\r\nsplit,\r\n--first part\r\nintro p,\r\napply hqr,\r\napply hpq,\r\nexact p,\r\n--second part\r\nintro r,\r\napply hqp,\r\napply hrq,\r\nexact r,\r\n"
    },
    {
      "lean": "example (P Q : Prop) : Q → (P ∨ Q) :=\n",
      "isSolved": true,
      "editorText": "intro q,\r\nright,\r\nexact q,"
    },
    {
      "lean": "lemma or_symm (P Q : Prop) : P ∨ Q → Q ∨ P :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\ncases h with p q,\r\n--case p\r\nright,\r\nexact p,\r\n--case q\r\nleft,\r\nexact q,\r\n"
    },
    {
      "lean": "lemma and_or_distrib_left (P Q R : Prop) : P ∧ (Q ∨ R) ↔ (P ∧ Q) ∨ (P ∧ R) :=\n",
      "isSolved": true,
      "editorText": "split,\r\n--first part\r\n  intro h,\r\n  cases h with p qr,\r\n  cases qr with q r,\r\n  --case q\r\n    left,\r\n    split,\r\n    --part p\r\n      exact p,\r\n    --part q\r\n      exact q,\r\n  --case r\r\n    right,\r\n    split,\r\n    --part p\r\n      exact p,\r\n    --part r\r\n      exact r,\r\n\r\n--second part\r\nintro h,\r\ncases h with pq pr,\r\n--case p^q\r\n  cases pq with p q,\r\n  split,\r\n  --part p\r\n    exact p,\r\n  --part q or r\r\n    left,\r\n    exact q,\r\n--case p^r\r\n  cases pr with p r,\r\n  split,\r\n  --part p\r\n    exact p,\r\n  --part q or r\r\n    right,\r\n    exact r,\r\n    \r\n"
    },
    {
      "lean": "lemma contra (P Q : Prop) : (P ∧ ¬ P) → Q :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\nexfalso,\r\nrw not_iff_imp_false at h,\r\ncases h with p np,\r\nexact np p,\r\n"
    },
    {
      "lean": "lemma contrapositive2 (P Q : Prop) : (¬ Q → ¬ P) → (P → Q) :=\n",
      "isSolved": true,
      "editorText": "intros h p',\r\nrepeat {rw not_iff_imp_false at h},\r\nby_cases p : P; by_cases q : Q,\r\n--case TT\r\nexact q,\r\n--case TF\r\nhave np := h q,\r\nhave boom := np p,\r\ncontradiction,\r\n--case FT\r\nexact q,\r\n--case FF\r\nrw not_iff_imp_false at p,\r\nhave boom := p p',\r\ncontradiction,"
    },
    {
      "lean": "theorem succ_inj' {a b : mynat} (hs : succ(a) = succ(b)) :  a = b := \n",
      "isSolved": true,
      "editorText": "exact succ_inj hs,"
    },
    {
      "lean": "theorem succ_succ_inj {a b : mynat} (h : succ(succ(a)) = succ(succ(b))) :  a = b := \n",
      "isSolved": true,
      "editorText": "apply succ_inj,\r\napply succ_inj,\r\nexact h,\r\n"
    },
    {
      "lean": "theorem succ_eq_succ_of_eq {a b : mynat} : a = b → succ(a) = succ(b) :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\nrw h,\r\nrefl,\r\n"
    },
    {
      "lean": "theorem succ_eq_succ_iff (a b : mynat) : succ a = succ b ↔ a = b :=\n",
      "isSolved": true,
      "editorText": "split,\r\n--part succ a = succ b → a = b\r\nexact succ_inj,\r\n--part a = b → succ a = succ b\r\nexact succ_eq_succ_of_eq,\r\n"
    },
    {
      "lean": "theorem add_right_cancel (a t b : mynat) : a + t = b + t → a = b :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\ninduction t with t ht,\r\n--base case\r\nrw add_zero a at h,\r\nrw add_zero b at h,\r\nexact h,\r\n\r\n--inductive step,\r\nrw add_succ a t at h,\r\nrw add_succ b t at h,\r\nrw succ_eq_succ_iff (a+t) (b+t) at h,\r\nexact ht h,\r\n"
    },
    {
      "lean": "theorem add_left_cancel (t a b : mynat) : t + a = t + b → a = b :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\nrw ← add_comm a t at h,\r\nrw ← add_comm b t at h,\r\nexact (add_right_cancel a t b) h,\r\n"
    },
    {
      "lean": "theorem add_right_cancel_iff (t a b : mynat) :  a + t = b + t ↔ a = b :=\n",
      "isSolved": true,
      "editorText": "split,\r\n--first part\r\nexact add_right_cancel a t b,\r\n--second part\r\nintro h,\r\nrw h,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma eq_zero_of_add_right_eq_self {a b : mynat} : a + b = a → b = 0 :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\nrw ← add_zero a at h,\r\nrw add_assoc a 0 b at h,\r\nrw zero_add b at h,\r\nexact (add_left_cancel a b 0) h,\r\n"
    },
    {
      "lean": "theorem succ_ne_zero (a : mynat) : succ a ≠ 0 := \n",
      "isSolved": true,
      "editorText": "symmetry,\r\nexact zero_ne_succ a,"
    },
    {
      "lean": "lemma add_left_eq_zero {{a b : mynat}} (H : a + b = 0) : b = 0 :=\n",
      "isSolved": true,
      "editorText": "cases b with d,\r\n--case b=0\r\nrefl,\r\n--case succ d\r\nrw add_succ a d at H,\r\nhave nh := succ_ne_zero (a+d),\r\nhave boom := nh H,\r\ncontradiction,\r\n"
    },
    {
      "lean": "lemma add_right_eq_zero {a b : mynat} : a + b = 0 → a = 0 :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\nrw add_comm a b at h,\r\nexact add_left_eq_zero h,\r\n"
    },
    {
      "lean": "theorem add_one_eq_succ (d : mynat) : d + 1 = succ d :=\n",
      "isSolved": true,
      "editorText": "symmetry,\r\nexact succ_eq_add_one d,"
    },
    {
      "lean": "lemma ne_succ_self (n : mynat) : n ≠ succ n :=\n",
      "isSolved": true,
      "editorText": "intro h,\r\ninduction n with k hk,\r\n--base case\r\nhave contra := zero_ne_succ 0,\r\nexact contra h,\r\n--inductive step\r\nhave k_eq_succ_k := succ_inj h,\r\nexact hk k_eq_succ_k,\r\n"
    },
    {
      "lean": "theorem mul_pos (a b : mynat) : a ≠ 0 → b ≠ 0 → a * b ≠ 0 :=\n",
      "isSolved": true,
      "editorText": "intro a_ne_zero,\r\nintro b_ne_zero,\r\nintro ab_eq_zero,\r\ncases b with n,\r\n-- Case b = 0\r\n  contradiction,\r\n-- Case b = succ n\r\n  rw mul_succ a n at ab_eq_zero,\r\n  cases a with m,\r\n  -- Case a = 0\r\n    contradiction,\r\n  -- Case a = succ m\r\n    rw add_succ ((succ m)*n) m at ab_eq_zero,\r\n    exact succ_ne_zero _ ab_eq_zero,\r\n    "
    },
    {
      "lean": "theorem eq_zero_or_eq_zero_of_mul_eq_zero (a b : mynat) (h : a * b = 0) :\n  a = 0 ∨ b = 0 :=\n",
      "isSolved": true,
      "editorText": "cases b with n,\r\n--case b = 0\r\n  right,\r\n  refl,\r\n--case b = succ n\r\n  cases a with m,\r\n  --case a = 0\r\n    left,\r\n    refl,\r\n  --case a = succ m\r\n    rw mul_succ (succ m) n at h,\r\n    rw add_succ ((succ m) * n) m at h,\r\n    have boom := succ_ne_zero _ h,\r\n    contradiction,\r\n    "
    },
    {
      "lean": "theorem mul_eq_zero_iff (a b : mynat): a * b = 0 ↔ a = 0 ∨ b = 0 :=\n",
      "isSolved": true,
      "editorText": "split,\r\n-- first part\r\nintro h,\r\nexact eq_zero_or_eq_zero_of_mul_eq_zero a b h,\r\n-- second part\r\nintro disj,\r\ncases disj with a_eq_zero b_eq_zero,\r\n-- case a_eq_zero\r\n  rw a_eq_zero,\r\n  exact zero_mul b,\r\n-- case b_eq_zero\r\n  rw b_eq_zero,\r\n  exact mul_zero a,\r\n  "
    },
    {
      "lean": "theorem mul_left_cancel (a b c : mynat) (ha : a ≠ 0) : a * b = a * c → b = c :=\n",
      "isSolved": true,
      "editorText": "induction c with d hd generalizing b,\r\n-- Part (∀ b)[a*b = a*0 → b = 0]\r\n  rw mul_zero a,\r\n  intro h,\r\n  have disj := eq_zero_or_eq_zero_of_mul_eq_zero a b h,\r\n  cases disj with a_zero b_zero,\r\n  -- Case a = 0\r\n    have boom := ha a_zero,\r\n    contradiction,\r\n  -- Case b = 0\r\n    exact b_zero,\r\n-- Part (∀ d)[(∀ b)[a*b = a*d → b = d] → (∀ b)[a*b = a* succ d → b = succ d]]\r\n  intro ha_succ_d,\r\n  cases b with n,\r\n  -- Case b = 0,\r\n    rw mul_zero a at ha_succ_d,\r\n    have symm_ha_succ_d : a * (succ d) = 0,\r\n      symmetry,\r\n      exact ha_succ_d,\r\n    have disj := (mul_eq_zero_iff a (succ d)).elim_left symm_ha_succ_d,\r\n    cases disj with a_eq_zero succd_eq_zero,\r\n    -- Case a = 0\r\n      have boom := ha a_eq_zero,\r\n      contradiction,\r\n    -- Case succd_eq_zero\r\n      symmetry,\r\n      exact succd_eq_zero,\r\n  \r\n  -- Case b = succ n\r\n    apply succ_eq_succ_of_eq,\r\n    rw mul_succ a n at ha_succ_d,\r\n    rw mul_succ a d at ha_succ_d,\r\n    have an_eq_ad := add_right_cancel (a*n) a (a*d) ha_succ_d,\r\n    have n_eq_d := hd n an_eq_ad,\r\n    exact n_eq_d,"
    },
    {
      "lean": "lemma one_add_le_self (x : mynat) : x ≤ 1 + x :=\n",
      "isSolved": true,
      "editorText": "use 1,\r\nexact add_comm 1 x,"
    },
    {
      "lean": "lemma le_refl (x : mynat) : x ≤ x :=\n",
      "isSolved": true,
      "editorText": "use 0,\r\nrw add_zero x,\r\nrefl,\r\n"
    },
    {
      "lean": "theorem le_succ (a b : mynat) : a ≤ b → a ≤ (succ b) :=\n",
      "isSolved": true,
      "editorText": "intro a_le_b,\r\ncases a_le_b with c hc,\r\nuse succ c,\r\nrw add_succ a c,\r\napply succ_eq_succ_of_eq,\r\nexact hc,\r\n"
    },
    {
      "lean": "lemma zero_le (a : mynat) : 0 ≤ a :=\n",
      "isSolved": true,
      "editorText": "use a,\r\nrw zero_add a,\r\nrefl,\r\n"
    },
    {
      "lean": "theorem le_trans (a b c : mynat) (hab : a ≤ b) (hbc : b ≤ c) : a ≤ c :=\n",
      "isSolved": true,
      "editorText": "cases hab with i hi,\r\ncases hbc with j hj,\r\nuse (i+j),\r\nrw hi at hj,\r\nrw add_assoc a i j at hj,\r\nexact hj,\r\n"
    },
    {
      "lean": "theorem le_antisymm (a b : mynat) (hab : a ≤ b) (hba : b ≤ a) : a = b :=\n",
      "isSolved": true,
      "editorText": "cases hab with i hi,\r\ncases hba with j hj,\r\nrw hj at hi,\r\nrw add_assoc b j i at hi,\r\nhave symm_hi : b + (j+i) = b,\r\n  symmetry,\r\n  exact hi,\r\nhave ji_eq_zero := eq_zero_of_add_right_eq_self symm_hi,\r\nhave j_eq_zero := add_right_eq_zero ji_eq_zero,\r\nrw j_eq_zero at hj,\r\nrw add_zero b at hj,\r\nexact hj,\r\n"
    },
    {
      "lean": "lemma le_zero (a : mynat) (h : a ≤ 0) : a = 0 :=\n",
      "isSolved": true,
      "editorText": "cases h with b hb,\r\nsymmetry at hb,\r\nexact add_right_eq_zero hb,"
    },
    {
      "lean": "lemma succ_le_succ (a b : mynat) (h : a ≤ b) : succ a ≤ succ b :=\n",
      "isSolved": true,
      "editorText": "cases h with c hc,\r\nuse c,\r\nrw succ_add a c,\r\napply succ_eq_succ_of_eq,\r\nexact hc,\r\n"
    },
    {
      "lean": "theorem le_total (a b : mynat) : a ≤ b ∨ b ≤ a :=\n",
      "isSolved": true,
      "editorText": "induction b with b hb,\r\n-- Base\r\nright,\r\nexact zero_le a,\r\n-- Inductive Step\r\ncases hb with a_le_b b_le_a,\r\n-- Case a_le_b\r\n  left,\r\n  exact le_succ a b a_le_b,\r\n-- Case b_le_a\r\n  cases b_le_a with c hc,\r\n  cases c with n,\r\n  -- case c = 0\r\n    have a_le_b : a ≤ b,\r\n      use 0,\r\n      rw add_zero a,\r\n      rw add_zero b at hc,\r\n      exact hc.symm,\r\n    left,\r\n    exact le_succ a b a_le_b,\r\n  -- case c = succ n\r\n    rw add_succ b n at hc,\r\n    rw ← succ_add b n at hc,\r\n    right,\r\n    use n,\r\n    exact hc,\r\n    "
    },
    {
      "lean": "lemma le_succ_self (a : mynat) : a ≤ succ a :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem add_le_add_right {a b : mynat} : a ≤ b → ∀ t, (a + t) ≤ (b + t) :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem le_of_succ_le_succ (a b : mynat) : succ a ≤ succ b → a ≤ b :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem not_succ_le_self (a : mynat) : ¬ (succ a ≤ a) :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "theorem add_le_add_left {a b : mynat} (h : a ≤ b) (t : mynat) :\n  t + a ≤ t + b :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma lt_aux_one (a b : mynat) : a ≤ b ∧ ¬ (b ≤ a) → succ a ≤ b :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma lt_aux_two (a b : mynat) : succ a ≤ b → a ≤ b ∧ ¬ (b ≤ a) :=\n",
      "editorText": "sorry"
    },
    {
      "lean": "lemma lt_iff_succ_le (a b : mynat) : a < b ↔ succ a ≤ b :=\n",
      "editorText": "sorry"
    }
  ]
}